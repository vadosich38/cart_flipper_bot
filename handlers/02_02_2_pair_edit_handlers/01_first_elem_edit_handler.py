# –ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π —ç–ª–º–µ–Ω—Ç –∏–ª–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ: ‚Äú–í—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç –ø–∞—Ä—ã: ‚Ä¶,
# –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–∞ —á—Ç–æ –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚Äú–û—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π‚Äù.

from .edit_pair_router import edit_pair_router
from bot_set.bot_states import BotStates

from aiogram import F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter


@edit_pair_router.message(F.text, StateFilter(BotStates.pair_editing_change_first_elem))
async def get_first_elem(message: Message, state: FSMContext) -> None:
    #TODO: –ø–µ—Ä–µ—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    await message.answer(text="–ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω! üü©")
    await state.set_state(BotStates.pair_editing_change_second_elem)
    #TODO: –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å
    pass


@edit_pair_router.message(F.data == "–æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π", StateFilter(BotStates.pair_editing_change_first_elem))
async def first_elem_leave_unchanged(message: Message, state: FSMContext) -> None:
    await message.answer(text="–ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π! üü©")
    await state.set_state(BotStates.pair_editing_change_second_elem)
    #TODO: –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏—Ç–∞—Ä—É–æ–π —Å –∫–Ω–æ–ø–∫–æ–π '–æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π'
    pass
