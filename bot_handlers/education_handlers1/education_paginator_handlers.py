from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram import F
from aiogram.filters import StateFilter

from main_modes.education_cmd import education_cmd_router
from bot_set.bot_states import BotStates
from keyboards.cards_paginator_ikb import get_cards_paginator_ikb as pag_ikb
from keyboards.back_to_main_menu import get_return_in_main_menu_kb as return_to_main_rkb
from keyboards.main_menu_kb import get_main_kb
from bot_set.data_formats_handlers import send_card_element
from bot_set.bot_object import card_flipper_bot
from DBPackage.DBclass import DBMethods


@education_cmd_router.callback_query(F.data == 'paginator_show_value', StateFilter(BotStates.teaching))
async def paginator_card_show(callback_data: CallbackQuery, state: FSMContext) -> None:
    """
    Callback handler for showing the current card second value.
    Args:
        callback_data (CallbackQuery): Callback data.
        state (FSMContext): State context.
    Returns:
        None
    """
    await callback_data.answer(text="–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É ‚û∞")
    data = await state.get_data()
    cards_pag_inst = data['paginator_instance']
    card_value = cards_pag_inst.show()

    await callback_data.message.delete()

    await send_card_element(user_id=callback_data.from_user.id,
                            card_value=card_value[0],
                            card_value_type=card_value[1],
                            keyboard=pag_ikb())


@education_cmd_router.callback_query(F.data == 'paginator_not_learned', StateFilter(BotStates.teaching))
async def paginator_card_not_learned(callback_data: CallbackQuery, state: FSMContext) -> None:
    """
    Callback handler for 'not learned' event.
    Args:
        callback_data (CallbackQuery): Callback data.
        state (FSMContext): State context.
    Returns:
        None
    """
    data = await state.get_data()
    cards_pag_inst = data['paginator_instance']
    card_value = cards_pag_inst.not_learned()

    await callback_data.message.delete()
    await send_card_element(user_id=callback_data.from_user.id,
                            card_value=card_value[0],
                            card_value_type=card_value[1],
                            keyboard=pag_ikb())


@education_cmd_router.callback_query(F.data == 'paginator_learned', StateFilter(BotStates.teaching))
async def paginator_card_learned(callback_data: CallbackQuery, state: FSMContext) -> None:
    """
    Callback handler for marking the current card as learned and proceed to next.
    Args:
        callback_data (CallbackQuery): Callback data.
        state (FSMContext): State context.
    Returns:
        None
    """
    data = await state.get_data()
    cards_pag_inst = data['paginator_instance']
    card_value = cards_pag_inst.set_learned()

    if card_value:
        await callback_data.message.delete()
        await send_card_element(user_id=callback_data.from_user.id,
                                card_value=card_value[0],
                                card_value_type=card_value[1],
                                keyboard=pag_ikb())
    else:
        await state.clear()

        await callback_data.answer(text='–í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑—É—á–µ–Ω—ã! –í—ã –º–æ–ª–æ–¥–µ—Ü üèÜ',
                                   show_alert=True)
        await callback_data.message.delete()
        await card_flipper_bot.send_message(chat_id=callback_data.from_user.id,
                                            text="–°–µ–π—á–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å üò¥"
                                                 "\n\n–Ø –Ω–∞–ø–æ–º–Ω—é, –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —É—á–∏—Ç—å—Å—è —Å–Ω–æ–≤–∞ üßë‚Äçüè´",
                                            reply_markup=get_main_kb())

        await state.set_state(BotStates.main_menu)
        DBMethods.set_next_lesson(telegram_id=callback_data.from_user.id)
        #TODO: –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –ø–∞—É–∑–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –∏ –ø—Ä–∏ –¥–µ–π—Å–≤—Ç–∏–∏ –ø–∞—É–∑—ã –≤–∫–ª–∞–¥–∫–∞ "–æ–±—É—á–µ–Ω–∏–µ" –Ω–µ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å
        # –∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ —Ç–æ–º, —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥–æ–∂–¥–∞—Ç—å
        # –ø—Ä–∏ —ç—Ç–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ!


@education_cmd_router.callback_query(F.data == 'paginator_menu', StateFilter(BotStates.teaching))
async def learning_exit(callback_data: CallbackQuery, state: FSMContext) -> None:
    """
    Callback handler for exiting the learning mode. Clear FSM cache and changes state to main_menu.
    Args:
        callback_data (CallbackQuery): Callback data.
        state (FSMContext): State context.
    Returns:
        None
    """
    await callback_data.answer(text="–ó–∞–∫–æ–Ω—á–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ üü¢")
    await callback_data.message.delete()
    await card_flipper_bot.send_message(chat_id=callback_data.from_user.id,
                                        text="–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ ‚¨áÔ∏è",
                                        reply_markup=get_main_kb())
    await state.clear()
    await state.set_state(BotStates.main_menu)
