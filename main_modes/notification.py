#TODO: –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–∑–∂–µ"
import aioschedule
import asyncio
import time

from bot_set.bot_object import card_flipper_bot
from DBPackage.DBclass import DBMethods
from keyboards.to_study_kb import get_to_study_notification_kb


async def send_notification():
    #TODO: –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    # active_users = DBMethods.
    success_counter = 0
    error_counter = 0
    for i_user in active_users:
        try:
            await card_flipper_bot.send_message(chat_id=i_user,
                                                text="–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –ø—Ä–æ–π—Ç–∏ —É—Ä–æ–∫, –Ω–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üßë‚Äçüè´",
                                                reply_markup=get_to_study_notification_kb())
            success_counter += 1
            #TODO: –∑–¥–µ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        except Exception as error:
            error_counter += 1
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {i_user} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –æ—à–∏–±–∫–∞: {error}")
            #TODO: –∑–¥–µ—Å—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        finally:
            print(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_counter} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, {error_counter} –æ—Ç–ø—Ä–∞–≤–æ–∫ –ø—Ä–∏–≤–µ–ª–∏ –∫ –æ—à–∏–±–∫–µ")

aioschedule.every().day.at("17:30").do(send_notification)

loop = asyncio.get_event_loop()
while True:
    loop.run_until_complete(aioschedule.run_pending())
    # time.sleep(0.1)
