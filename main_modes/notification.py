#TODO: –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–∑–∂–µ"
from bot_set.bot_object import card_flipper_bot
from DBPackage.DBclass import DBMethods
from keyboards.to_study_kb import get_to_study_notification_kb


async def send_notification():
    print("–≤—ã–∑–æ–≤ —Å–µ–Ω–¥ –Ω–æ—Ç–∏—Ñ")
    #TODO: –Ω—É–∂–Ω–æ –ª–∏ –æ—á–∏—â–∞—Ç—å –∏ –º–µ–Ω—è—Ç—å —Å—Ç–µ–π—Ç?
    active_users = DBMethods.get_active_users_telegram_ids()
    success_counter = 0
    error_counter = 0
    for i_user in active_users:
        try:
            print("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å")
            await card_flipper_bot.send_message(chat_id=i_user,
                                                text="–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –ø—Ä–æ–π—Ç–∏ —É—Ä–æ–∫, –Ω–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üßë‚Äçüè´",
                                                reply_markup=get_to_study_notification_kb())
            success_counter += 1
            DBMethods.update_last_activity(telegram_id=i_user)
        except Exception as error:
            error_counter += 1
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {i_user} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –æ—à–∏–±–∫–∞: {error}")
            DBMethods.deactivate_user(telegram_id=i_user)
        finally:
            print(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_counter} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, {error_counter} –æ—Ç–ø—Ä–∞–≤–æ–∫ –ø—Ä–∏–≤–µ–ª–∏ –∫ –æ—à–∏–±–∫–µ")
