from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram import F
from aiogram.filters import StateFilter
from aiogram import Router

from bot_set.bot_states import BotStates
from keyboards.cards_paginator_ikb import get_cards_paginator_ikb as cards_pag_ikb
from bot_set.cards_paginator_class import CardsPaginator
from bot_set.data_formats_handlers import send_card_element
from keyboards.main_menu_kb import get_main_kb
from loader import logger
from DBPackage.DBclass import DBMethods
from datetime import datetime

education_cmd_router = Router()


@education_cmd_router.message(F.text.lower() == "—É—á–∏—Ç—å—Å—è üßë‚Äçüè´", StateFilter(BotStates.main_menu))
async def education_cmd(message: Message, state: FSMContext) -> None:
    """
    Handler for the "Learn" command.
    Args:
        message (Message): Incoming message.
        state (FSMContext): State context.
    Returns:
        None
    """
    #–ø—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω—ã–Ω–µ—à–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–∑–∂–µ, —á–µ–º —Ç–æ, –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–æ–ª–∂–Ω–∞ –¥–ª–∏—Ç—å—Å—è –ø–∞—É–∑–∞.
    next_lesson_at = DBMethods.get_next_lesson(telegram_id=message.from_user.id)
    if next_lesson_at < datetime.now():
        await state.set_state(BotStates.teaching)
        logger.debug('Creating paginator instance')
        active_collection_card_list = DBMethods.get_active_collections_cards(telegram_id=message.from_user.id)
        if active_collection_card_list:
            cards_pag_inst = CardsPaginator(active_collection_card_list)
            card_value = cards_pag_inst.start()
            await send_card_element(user_id=message.from_user.id,
                                    card_value=card_value[0],
                                    card_value_type=card_value[1],
                                    keyboard=cards_pag_ikb())
            await state.set_data({'paginator_instance': cards_pag_inst})
        else:
            await state.clear()
            await state.set_state(BotStates.main_menu)
            await message.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–∏–π üßë‚Äçüè´\n\n–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏‚úÖ',
                                 reply_markup=get_main_kb())
    else:
        await message.answer(text="–í–∞–º –µ—â–µ —Ä–∞–Ω–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å —É—Ä–æ–∫ ‚ùå\n\n"
                                  "–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–∫–∞ –Ω—É–∂–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 20 –º–∏–Ω—É—Ç."
                                  "–í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ ü´£\n\n",
                             reply_markup=get_main_kb())
