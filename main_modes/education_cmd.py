#TODO:
# –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ teaching
# –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å—Ü–µ–Ω–∞—Ä–∏–π education_handlers
# –§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (–º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î):
# –¶–∏–∫–ª –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π –∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –ë–î –∫–∞–∂–¥–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏,
# –≥–¥–µ —Å–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –ø–∞—Ä—ã –≤ –æ–¥–∏–Ω —Å–ª–æ–≤–∞—Ä—å –≤ —Ä–∞–Ω–¥–æ–º –ø–æ—Ä—è–¥–∫–µ.
# –ò–¥—è –ø–æ —Å–ª–æ–≤–∞—Ä—é –±–æ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏—è:
# –û–±—ä–µ–∫—Ç: –≠–ª–µ–º–µ–Ω—Ç 1, –∫–Ω–æ–ø–∫–∏ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: –ó–Ω–∞—é, —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å, –Ω–µ –∑–Ω–∞—é
# –ö–æ–≥–¥–∞ —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏. –í—ã–≤–æ–¥–∏—Ç—Å—è –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.


from aiogram.types import CallbackQuery
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram import F
from aiogram.filters import StateFilter
from bot_set.bot_states import BotStates
from keyboards.paginator_ikb import get_cards_paginator_ikb as pag_kb
from keyboards.paginator_ikb import get_exit_ikb
from bot_set.routers import education_cmd_router
from bot_set.paginator_class import Paginator


@education_cmd_router.message(F.text.lower() == "—É—á–∏—Ç—å—Å—è üßë‚Äçüè´")
async def education_cmd(message: Message, state: FSMContext) -> None:
    await state.set_state(BotStates.teaching)
    #TODO: –ø–æ—á–µ–º—É —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∞–π–¥–∏ —á–∞—Ç–∞ –∞ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? message.from_user.id
    #p_i - –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    p_i = Paginator(message.chat.id)
    value = p_i.get_start()
    if value:
        await message.answer(value, reply_markup=pag_kb(p_i.get_pos(), p_i.get_len()))
        #TODO: –∑–¥–µ—Å—å –∏–º–µ–Ω–Ω–æ set_data –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–ª–∏ –ª—É—á—à–µ update_data? –∑–∞—á–µ–º –º—ã —Å—é–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞—Å—Å? –∫–∞–∫ —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º?
        await state.set_data({'paginator_instance': p_i})
    else:
        await message.answer('All cards is learned', reply_markup=get_exit_ikb())


@education_cmd_router.callback_query(F.data.startswith('paginator'), StateFilter(BotStates.teaching))
async def process_paginator_callback(callback_data: CallbackQuery, state: FSMContext):
    _, action = callback_data.data.split('_')
    data = await state.get_data()
    p_i = data['paginator_instance']

    #TODO: —ç—Ç–æ –≤—Å–µ —Ä–∞–∑–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏ —Ñ–∏–ª—å—Ç—Ä—É—é—Ç—Å—è –æ–Ω–∏ –ø–æ F.data ==
    if action == 'menu':
        await state.set_data({})
        await state.set_state(BotStates.main_menu)
    if p_i.get_len == 0:
        await callback_data.answer('All cards is learned', reply_markup=get_exit_ikb())
    if action == 'back':
        await callback_data.answer(p_i.get_card_bck(), reply_markup=pag_kb(p_i.get_pos(), p_i.get_len()))
    elif action == 'forward':
        await callback_data.answer(p_i.get_card_fwd(), reply_markup=pag_kb(p_i.get_pos(), p_i.get_len()))
    elif action == 'show':
        await callback_data.answer(p_i.get_response(), reply_markup=pag_kb(p_i.get_pos(), p_i.get_len(), True))
    elif action == 'learned':
        p_i.set_learned()
        await callback_data.answer(p_i.get_start(), reply_markup=pag_kb(p_i.get_pos(), p_i.get_len()))
    await state.set_data({'paginator_instance': p_i})

